{
  "swagger": "2.0",
  "info": {
    "title": "Moodzic API",
    "description": "API documentation for Moodzic",
    "version": "1.0.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": ["http"],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "JWT authorization header using the Bearer scheme."
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "paths": {
    "/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Creates a new user account with an email and password.",
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" },
                "password": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "201": { "description": "User created successfully." },
          "400": { "description": "User already exists." },
          "500": { "description": "Server error." }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "Login a registered user",
        "description": "Logs in a user with an email and password. Use the bearer token provided to access the other endpoints.",
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" },
                "password": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "User logged in successfully." },
          "400": { "description": "User not found" },
          "401": { "description": "Invalid credentials" },
          "500": { "description": "Server error." }
        }
      }
    },
    "/requestPasswordReset": {
      "post": {
        "summary": "Request a password reset",
        "description": "Sends an email to the user with a reset code to reset their password.",
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Password reset email sent." },
          "404": { "description": "User not found" },
          "500": { "description": "Server error." }
        }
      }
    },
    "/resetPassword": {
      "post": {
        "summary": "Reset a user's password",
        "description": "Resets a user's password with a reset code and new password. A reset code is required, which is sent to the user's email through a password reset request.",
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" },
                "resetCode": { "type": "string" },
                "newPassword": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Password reset successfully." },
          "400": { "description": "Invalid reset code or code expired" },
          "500": { "description": "Server error." }
        }
      }
    },
    "/generate-audio": {
      "post": {
        "summary": "Generate audio",
        "description": "Send a text prompt to generate an audio file. The text prompt should describe the mood and setting of the kind of sound you're looking to generate. Can take up to 60 sec for a response.",
        "security": [{ "Bearer": [] }],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "promptText": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Audio Generated Successfully." },
          "400": { "description": "Invalid format" },
          "500": {
            "description": "Server error. LLM most likely is not running."
          }
        }
      }
    },
    "/getAllUsersData": {
      "get": {
        "summary": "Get all users data. You must be logged in as an Admin to access this.",
        "description": "Returns the users id, email, role and total number of requests made for every endpoint combined.",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": { "description": "Users data returned successfully." },
          "500": { "description": "Server error." }
        }
      }
    },
    "/getNumberOfRequestsByEndpoint": {
      "get": {
        "summary": "Get number of GET, POST, PATCH, DELETE requests made. You must be logged in as an Admin to access this.",
        "description": "Returns the number of requests made for each endpoint type, grouped by the HTTP method.",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": { "description": "Data successfully retreived." },
          "403": { "description": "Forbidden" },
          "500": { "description": "Server error." }
        }
      }
    },
    "/getEndpointsCalledByUser": {
      "get": {
        "summary": "This returns the logged in users api requests for each endpoint. All logged in users can access this.",
        "description": "Returns the number of requests made for each endpoint type, grouped by the HTTP method.",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": { "description": "Data successfully retreived." },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "500": { "description": "Server error." }
        }
      }
    },
    "/updateRole/{id}": {
      "patch": {
        "summary": "Update user role from user to admin or vice versa. Must be logged in and an admin to access this.",
        "description": "Updates the role of a user.",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "User role updated successfully." },
          "403": { "description": "Forbidden" },
          "404": { "description": "User not found" },
          "500": { "description": "Server error." }
        }
      }
    },
    "/delete/{id}": {
      "delete": {
        "summary": "Delete a user by id. Must be logged in and an admin to access this.",
        "description": "Deletes a user account.",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "User deleted successfully." },
          "403": { "description": "Forbidden" },
          "404": { "description": "User not found" },
          "500": { "description": "Server error." }
        }
      }
    }
  }
}
