{
  "openapi": "3.0.3",
  "info": {
    "title": "Moodzic - And AI Powered Music Generator",
    "description": "Moodzic API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url":"https://comp4537moodzicbackend-grcvccftg4bzdmcr.canadacentral-01.azurewebsites.net"
    }
  ],
  "tags": [
    {
      "name": "Moodzic",
      "description": "Generate a song for every mood"
    }
  ],
  "paths": {
    "/register": {
      "post": {
        "tags": ["Moodzic"],
        "summary": "Register a new user",
        "description": "Registers a new user to the Moodzic platform",
        "requestBody": {
          "description": "Adds a new user to the Moodzic platform",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "400": {
            "description": "User already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": ["Moodzic"],
        "summary": "Login as a user",
        "description": "Allows previously registered users to login to the Moodzic platform",
        "requestBody": {
          "description": "Adds a new user to the Moodzic platform",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User logged in successfully"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": ["Moodzic"],
        "summary": "Logout as a user",
        "description": "Logout a user from the Moodzic platform by invalidating the session cookie",
        "responses": {
          "200": {
            "description": "User logged out successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/requestPasswordReset": {
      "post": {
        "tags": ["Moodzic"],
        "summary": "Request a password reset",
        "description": "Allows users to request a password reset code to be sent to their email",
        "requestBody": {
          "description": "Requests a password reset code to be sent to the user's email",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password reset code sent successfully"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/resetPassword": {
      "post": {
        "tags": ["Moodzic"],
        "summary": "Reset your password as a user",
        "description": "Allows users to reset their password using their requested password reset code",
        "requestBody": {
          "description": "Resets the user's password using the password reset code",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password reset code sent successfully"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/getAllUsersData": {
      "get": {
        "tags": ["Moodzic"],
        "summary": "Gets all users data",
        "description": "Must be logged in and an Admin. Route to get all users data",
        "responses": {
          "200": {
            "description": "Password reset code sent successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/getNumberOfRequestsByEndpoint": {
      "get": {
        "tags": ["Moodzic"],
        "summary": "Get the number of requests by endpoint",
        "description": "Must be logged in and an Admin. Route to get all requests grouped by endpoints",
        "responses": {
          "200": {
            "description": "Password reset code sent successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/getEndpointsCalledByUser": {
      "get": {
        "tags": ["Moodzic"],
        "summary": "Get endpoints called by user",
        "description": "Must be logged in. Route to get all requests made by a user grouped by endpoints.",
        "responses": {
          "200": {
            "description": "User's endpoint data returned successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/verify": {
      "get": {
        "tags": ["Moodzic"],
        "summary": "Checks if a user is logged in",
        "description": "Checks if a user is logged in by verifying the session cookie. If the user is logged in, returns the user's role_id",
        "responses": {
          "200": {
            "description": "User Authenticated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/updateRole/{id}": {
      "patch": {
        "tags": ["Moodzic"],
        "summary": "Update a user's role",
        "description": "Must be logged in and an Admin. Route to update a user's role",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User role updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/delete/{id}": {
      "delete": {
        "tags": ["Moodzic"],
        "summary": "Delete a user",
        "description": "Must be logged in and an Admin. Route to delete a user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deelted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john@john.com"
          },
          "password": {
            "type": "string",
            "example": "123"
          }
        }
      },
      "PasswordResetRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john@john.com"
          }
        }
      },
      "ResetPassword": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john@john.com"
          },
          "resetCode": {
            "type": "string",
            "example": "your-reset-code"
          },
          "newPassword": {
            "type": "string",
            "example": "123456789"
          }
        }
      }
    }
  }
}